from ultralytics import YOLO
import os
import cv2
from PIL import Image

# Load the trained YOLOv8 Nano model
model = YOLO(r"/home/mrsd/Desktop/RS Del Code-20230919T000925Z-001/RoboSpect Code/YOLO V8/runs/detect/train32/weights/best.pt")

# Directory containing the test images
images_dir = r"/home/mrsd/Desktop/RS Del Code-20230919T000925Z-001/RoboSpect Code/YOLO V8/imagesfortest"

# List all image files in the directory
image_files = [f for f in os.listdir(images_dir) if f.endswith(('.jpg', '.jpeg', '.png', '.bmp'))]

i = 1

# Process each image in the folder
for image_file in image_files:
    # Path to the current image
    image_path = os.path.join(images_dir, image_file)

    print("Image Number = " +str(i))

    # Load the uploaded image
    img = cv2.imread(image_path)

    results = model.predict(img)
    result = results[0]

    # Check if there are bounding boxes
    if result.boxes:
        print(f"Bounding boxes found in {image_file}")
        for box in result.boxes:
            class_id = result.names[box.cls[0].item()]
            cords = box.xyxy[0].tolist()
            cords = [round(x) for x in cords]
            conf = round(box.conf[0].item(), 2)
            print("Object type:", class_id)
            print("Coordinates:", cords)
            print("Probability:", conf)
            print("---")

        # Display the image with bounding boxes
        Image.fromarray(result.plot()[:, :, ::-1]).show()

    else:
        print(f"No bounding boxes found in {image_file}")

    i = i+1    

